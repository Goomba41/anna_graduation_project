import z from 'zod'

export const MeasuringUnit = z.object({
  Id: z.number(),
  Name: z.string(),
  UsOboznRu: z.nullable(z.string()),
  UsOboznM: z.nullable(z.string()),
  KodOboznRu: z.nullable(z.string()),
  KodOboznM: z.nullable(z.string()),
  Base: z.nullable(z.number()),
  Koef: z.nullable(z.number()),
})

export const MeasuringUnits = z.array(MeasuringUnit)

export type TSMeasuringUnits = z.infer<typeof MeasuringUnits>

export const RightsGroup = z.object({
  Id: z.number(),
  Name: z.string(),
  AppId: z.number(),
  GroupId: z.number(),
})

export const RightsGroups = z.array(RightsGroup)

export const Document = z.object({
  Id: z.number(),
  Name: z.string(),
})

export const Documents = z.array(Document)

export const IndicatorType = z.object({
  Id: z.number(),
  AlgName: z.string(),
})

export const IndicatorTypes = z.array(IndicatorType)

export const WebReportsGroup = z.object({
  Groupid: z.number(),
  Sort: z.number().nullish(),
  Groupname: z.string(),
  Metadata: z.any().transform((val) => {
    return val ? (typeof val === 'string' ? (JSON.parse(val) as unknown) : val) : null
  }),
})

export const WebReportsGroups = z.array(WebReportsGroup)

export type WebReportsGroup = z.infer<typeof WebReportsGroup>

export type WebReportsGroups = z.infer<typeof WebReportsGroups>

export const IndicatorMode = z.object({
  Id: z.number(),
  MsrModeName: z.string(),
  MsrModeSort: z.number(),
})

export const IndicatorModes = z.array(IndicatorMode)

export const IndicatorRank = z.object({
  Id: z.number(),
  RankName: z.string(),
  RankSort: z.number(),
})

export const IndicatorRanks = z.array(IndicatorRank)

export const WebReportsModel = z.object({
  Id: z.number(),
  Name: z.string(),
  Base: z.string(),
  TableFakt: z.string(),
  FieldValue: z.string(),
})

export const WebReportsModels = z.array(WebReportsModel)

export type WebReportsModel = z.infer<typeof WebReportsModel>

export type WebReportsModels = z.infer<typeof WebReportsModels>

export const dottedNumbersRegex: RegExp = /^([0-9]{1,}([.+][0-9]{1,})*)|([A-Z]+)$/gm

export const OkvedItem = z.object({
  OkvedCodeCh: z.nullable(z.string().regex(dottedNumbersRegex)),
  OkvedNodeCh: z.nullable(z.string().regex(dottedNumbersRegex)),
  OkvedId: z.coerce.number(),
  OkvedNode: z.coerce.number().nullable(),
  OkvedCode: z.coerce.number(),
  OkvedSort: z.coerce.number(),
  OkvedName: z.string(),
  OkvedShname: z.string(),
  OkvedLevel: z.coerce.number(),
  CathokvedCode: z.nullable(z.string()),
  SubokvedCode: z.nullable(z.string()),
  OkvedActive: z.coerce.number(),
  OkvedGrnum: z.coerce.number(),
  OkvedSokrName: z.nullable(z.string()),
})

export const OkvedItems = z.array(OkvedItem)

export type TSOkvedItem = z.infer<typeof OkvedItem>

export type TSOkvedItems = z.infer<typeof OkvedItems>

export const ModelAttribute = z.object({
  Id: z.coerce.number(), // –£–ò–î
  ModelId: z.coerce.number(), // –°–≤—è–∑–∞–Ω–Ω–∞—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º –º–æ–¥–µ–ª—å
  AttrName: z.string(), // –ò–º—è –∞—Ç—Ä–∏–±—É—Ç–∞ (–¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ UI)
  Tree: z.boolean(), // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞—Ç—Ä–∏–±—É—Ç–∞ - –¥–µ—Ä–µ–≤–æ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞?
  TreeId: z.string(), // –ï—Å–ª–∏ –¥–µ—Ä–µ–≤–æ, –£–ò–î —Å—Ç—Ä–æ–∫–∏
  TreeNode: z.string(), // –ï—Å–ª–∏ –¥–µ—Ä–µ–≤–æ, –£–ò–î —Ä–æ–¥–∏—Ç–µ–ª—è —Å—Ç—Ä–æ–∫–∏
  TableS: z.string(), // –¢–∞–±–ª–∏—Ü–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
  Alias: z.string(), // –ü—Å–µ–≤–¥–æ–Ω–∏–º —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ UI)
  FieldS: z.string(), // –°—Ç–æ–ª–±–µ—Ü —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
  FieldSid: z.string(), // –°—Ç–æ–ª–±–µ—Ü —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
  SortAtr: z.string(), // –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  FieldTable: z.string(), // –ü–æ–ª–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–∞–Ω–Ω—ã—Ö
  HandbookEditable: z.boolean().default(false), // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–æ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
})

export const ModelAttributes = z.array(ModelAttribute)

export type ModelAttribute = z.infer<typeof ModelAttribute>

export type ModelAttributes = z.infer<typeof ModelAttributes>

export const Decree607Plane = z.object({
  ReportName: z.string(), // –ò–º—è –æ—Ç—á—ë—Ç–∞ (–Ω–∞—á–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å)
  PlaneName: z.string(), // –ò–º—è –ø–ª–∞–Ω–∞ (ReportName + YEARCREATE)
  YearCreate: z.coerce.number(), // –ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è
  IdReport: z.coerce.number(), // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–∞
  IdPlane: z.coerce.number(), // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞
  Published: z.boolean().default(false),
  HasData: z.boolean().default(false).nullish(),
  HasTable: z.boolean().default(false).nullish(),
})

export const Decree607Planes = z.array(Decree607Plane)

export type Decree607Plane = z.infer<typeof Decree607Plane>

export type Decree607Planes = z.infer<typeof Decree607Planes>

export const Decree607Report = z.object({
  IdReport: z.coerce.number(), // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞
  ReportName: z.string(), // –ò–º—è –æ—Ç—á—ë—Ç–∞
  TypeReport: z.coerce.number(), // –¢–∏–ø –æ—Ç—á—ë—Ç–∞ (–ø–æ—á—Ç–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π)
})

export const Decree607Reports = z.array(Decree607Report)

export type Decree607Report = z.infer<typeof Decree607Report>

export type Decree607Reports = z.infer<typeof Decree607Reports>

const periodBase = z.object({
  PeriodId: z.coerce.number(), // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
  PeriodName: z.string(), // –ò–º—è –ü–µ—Ä–∏–æ–¥–∞
  PeriodGr: z.coerce.number(), // –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–∏–æ–¥–∞
  PeriodSort: z.coerce.number(), // –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  PeriodRef: z.coerce.number().nullable(), // –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
})

export const Period = periodBase.extend({
  PeriodRefNavigation: periodBase.or(z.coerce.number()).nullable(),
})

export const Periods = z.array(Period)

export type TSPeriod = z.infer<typeof Period>

export type TSPeriods = z.infer<typeof Periods>

const ownershipBase = z.object({
  Kfs: z.coerce.number(),
  KfsName: z.coerce.string(),
  KfsNode: z.coerce.number().nullable(),
  Prim: z.coerce.string(),
  KfsSort: z.coerce.number(),
})

export const Ownership = ownershipBase.extend({
  KfsNodeNavigation: ownershipBase.nullish(),
})

export const Ownerships = z.array(Ownership)

export type TSOwnership = z.infer<typeof Ownership>

export type TSOwnerships = z.infer<typeof Ownerships>

export const IndicatorModeGroup = z.object({
  Id: z.coerce.number(),
  MsrModeGroupName: z.coerce.string(),
  MsrModeGroupSort: z.coerce.number(),
})

export const IndicatorModeGroups = z.array(IndicatorModeGroup)

export type TSIndicatorModeGroup = z.infer<typeof IndicatorModeGroup>

export type TSIndicatorModeGroups = z.infer<typeof IndicatorModeGroups>

export const TemplateCategory = z.object({
  Id: z.number(),
  Name: z.string(),
  Description: z.string(),
  IsDelete: z.boolean(),
})

// üëÜ –°—Ç–∞—Ä—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—Ä–∏—Ç—å—Å—è –∏ –ø–æ—á–∏—Å—Ç–∏—Ç—å

export const TemplateCategories = z.array(TemplateCategory)

export type TTemplateCategory = z.infer<typeof TemplateCategory>

export type TTemplateCategories = z.infer<typeof TemplateCategories>

export const Reglament = z.object({
  Id: z.number(),
  Name: z.string(),
  IsDelete: z.boolean(),
})

export const Reglaments = z.array(Reglament)

export type TReglament = z.infer<typeof Reglament>

export type TReglaments = z.infer<typeof Reglaments>

export const Initiator = z.object({
  Id: z.number(),
  Name: z.string(),
  Description: z.string(),
  IsDelete: z.boolean(),
})

export const Initiators = z.array(Initiator)

export type TInitiator = z.infer<typeof Initiator>

export type TInitiators = z.infer<typeof Initiators>

export const Status = z.object({
  Id: z.number(),
  Name: z.string(),
})

export const Statuses = z.array(Status)

export type TStatus = z.infer<typeof Status>

export type TStatuses = z.infer<typeof Statuses>

export const Recipient = z.object({
  Label: z.string(),
  Value: z.number(),
})

export const Recipients = z.array(Recipient.extend({ CatalogueValue: z.number() }))

export const RecipientsGroup = Recipient.extend({
  Items: z.array(Recipient.extend({ CatalogueValue: z.number() })),
})

export const RecipientsGroups = z.array(RecipientsGroup)

export type TRecipient = z.infer<typeof Recipient>

export type TRecipients = z.infer<typeof Recipients>

export type TRecipientsGroup = z.infer<typeof RecipientsGroup>

export type TRecipientsGroups = z.infer<typeof RecipientsGroups>
